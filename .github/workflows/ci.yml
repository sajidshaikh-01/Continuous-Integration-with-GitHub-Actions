name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # üß± 1Ô∏è‚É£ Build & Test Job
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Cache dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run tests
      - name: Run unit tests
        run: npm test

      # Build application
      - name: Build application
        run: npm run build

      # Upload build output as artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  # üîí 2Ô∏è‚É£ Security Scanning Job (Trivy + SonarQube)
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Run Trivy vulnerability scan
      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: table
          exit-code: 0
          ignore-unfixed: true
          vuln-type: os,library
          severity: HIGH,CRITICAL

      # Run SonarQube scan (optional)
      - name: SonarQube Code Quality
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # üê≥ 3Ô∏è‚É£ Docker Build & Push Job
  docker-build-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]

    steps:
      - uses: actions/checkout@v4

      # Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ci-demo:latest .

      # Push Docker image
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/ci-demo:latest
